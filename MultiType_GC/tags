!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.8	//
BINMAPSHIFT	Library/pos-malloc.h	860;"	d
BINMAPSIZE	Library/pos-malloc.h	862;"	d
BITSPERMAP	Library/pos-malloc.h	861;"	d
BITS_PER_LONG	KV/btree/pos-btree.c	72;"	d	file:
BTREE	KV/main.c	20;"	d	file:
BTREE	KV/main_bdb.c	18;"	d	file:
BTREE_FN	KV/btree/@btree-type.h	142;"	d
BTREE_FN	KV/btree/@btree-type.h	4;"	d
BTREE_KEYTYPE	KV/btree/@btree-type.h	146;"	d
BTREE_TP	KV/btree/@btree-type.h	141;"	d
BTREE_TP	KV/btree/@btree-type.h	3;"	d
BTREE_TYPE_BITS	KV/btree/@btree-type.h	147;"	d
BTREE_TYPE_GEO	KV/btree/@btree-type.h	145;"	d
BTREE_TYPE_HEAD	KV/btree/@btree-type.h	143;"	d
BTREE_TYPE_HEAD	KV/btree/@btree-type.h	5;"	d
BTREE_TYPE_SUFFIX	KV/btree/@btree-type.h	144;"	d
CONSISTENCY	KV/btree/pos-btree.c	64;"	d	file:
CONSISTENCY	KV/hashtable/pos-hashtable.c	24;"	d	file:
CONSISTENCY	KV/list/pos-list.c	19;"	d	file:
CONSISTENCY	Library/pos-malloc.h	12;"	d
DB_DIRECTORY	KV/main_bdb.c	20;"	d	file:
DB_DIRECTORY	KV/workload_list.c	16;"	d	file:
DEBUG	Library/pos-lib.c	22;"	d	file:
DEFAULT_MMAP_MAX	Library/pos-malloc.h	415;"	d
DEFAULT_MMAP_MAX	Library/pos-malloc.h	417;"	d
DEFAULT_MMAP_THRESHOLD	Library/pos-malloc.h	395;"	d
DEFAULT_MMAP_THRESHOLD_MAX	Library/pos-malloc.h	294;"	d
DEFAULT_MMAP_THRESHOLD_MAX	Library/pos-malloc.h	296;"	d
DEFAULT_MMAP_THRESHOLD_MIN	Library/pos-malloc.h	285;"	d
DEFAULT_MXFAST	Library/pos-malloc.h	240;"	d
DEFAULT_PAD	Library/pos-malloc.h	1079;"	d
DEFAULT_TOP_PAD	Library/pos-malloc.h	276;"	d
DELETE	KV/workload_list.h	13;"	d
ENOENT	KV/btree/pos-btree.c	74;"	d	file:
ENOMEM	KV/btree/pos-btree.c	75;"	d	file:
FASTBIN_CONSOLIDATION_THRESHOLD	Library/pos-malloc.h	919;"	d
FASTCHUNKS_BIT	Library/pos-malloc.h	936;"	d
FIRST_CHUNK	Library/pos-malloc.h	492;"	d
FREQ_NUM	KV/main.c	18;"	d	file:
FREQ_NUM	KV/main_bdb.c	16;"	d	file:
GC_NODE	Library/pos-malloc.c	/^}GC_NODE;$/;"	t	typeref:struct:gc_node	file:
HASH	KV/main.c	21;"	d	file:
HASH	KV/main_bdb.c	19;"	d	file:
INIT_KEY	Library/pos-malloc.h	952;"	d
INSERT	KV/workload_list.h	12;"	d
INTERNAL_SIZE_T	Library/pos-malloc.h	170;"	d
KEY_SIZE	KV/hashtable/pos-hashtable_private.h	16;"	d
KEY_SIZE	KV/list/pos-list.h	14;"	d
KV_BASE	Library/pos-log.c	22;"	d	file:
KV_SIZE	Library/pos-log.c	20;"	d	file:
L1_CACHE_BYTES	KV/btree/pos-btree.c	70;"	d	file:
L1_CACHE_SHIFT	KV/btree/pos-btree.c	69;"	d	file:
LAST_CHUNK	Library/pos-malloc.h	495;"	d
LIST	KV/main.c	22;"	d	file:
LOG_CNT_ON	KV/btree/pos-btree.c	66;"	d	file:
LOG_CNT_ON	KV/hashtable/pos-hashtable.c	26;"	d	file:
LOG_CNT_ON	Library/pos-log.c	28;"	d	file:
LOG_SIZE	Library/pos-log.c	17;"	d	file:
LOG_SIZE_KB	Library/pos-log.c	16;"	d	file:
LONG_PER_U64	KV/btree/pos-btree.c	97;"	d	file:
LOOKUP	KV/workload_list.h	14;"	d
MALLOC_ALIGNMENT	Library/pos-malloc.h	196;"	d
MALLOC_ALIGN_MASK	Library/pos-malloc.h	200;"	d
MALLOC_BASE	Library/pos-log.c	23;"	d	file:
MALLOC_END	Library/pos-log.c	24;"	d	file:
MAX	KV/btree/pos-btree.c	81;"	d	file:
MAX_FAST_SIZE	Library/pos-malloc.h	904;"	d
MAX_ITERS	Library/pos-malloc.c	510;"	d	file:
MINSIZE	Library/pos-malloc.h	442;"	d
MIN_CHUNK_SIZE	Library/pos-malloc.h	438;"	d
MIN_LARGE_SIZE	Library/pos-malloc.h	796;"	d
MODE	KV/btree/pos-btree.c	61;"	d	file:
MODE	KV/hashtable/pos-hashtable.c	21;"	d	file:
MODE	KV/list/pos-list.c	17;"	d	file:
M_MMAP_MAX	Library/pos-malloc.h	411;"	d
M_MMAP_THRESHOLD	Library/pos-malloc.h	392;"	d
M_MXFAST	Library/pos-malloc.h	236;"	d
M_TOP_PAD	Library/pos-malloc.h	273;"	d
NBINS	Library/pos-malloc.h	793;"	d
NFASTBINS	Library/pos-malloc.h	906;"	d
NODESIZE	KV/btree/pos-btree.c	82;"	d	file:
NSMALLBINS	Library/pos-malloc.h	794;"	d
OFFSET_BASE	KV/btree/pos-btree.c	62;"	d	file:
OFFSET_BASE	KV/hashtable/pos-hashtable.c	22;"	d	file:
OFFSET_BASE	KV/list/pos-list.c	18;"	d	file:
PAGESIZE	Library/pos-malloc.h	1006;"	d
POS_ACCESS_ERROR	Kernel/pos.h	73;"	d
POS_AREA_END	Kernel/pos.h	53;"	d
POS_AREA_SIZE	Kernel/pos.h	51;"	d
POS_AREA_START	Kernel/pos.h	52;"	d
POS_ARRAY_INDEX	Kernel/pos_namespace.h	20;"	d
POS_ARRAY_LENGTH	Kernel/pos_namespace.h	19;"	d
POS_BTREE_H	KV/btree/pos-btree.h	10;"	d
POS_DEBUG	Library/pos-malloc.c	55;"	d	file:
POS_DEFAULT_MODE	Kernel/pos.h	77;"	d
POS_DESCRIPTOR	Kernel/pos.h	54;"	d
POS_EMPTY	Kernel/pos.h	67;"	d
POS_ERROR	Kernel/pos.h	71;"	d
POS_GRP_MODE	Kernel/pos.h	83;"	d
POS_GRP_SHIFT	Kernel/pos.h	80;"	d
POS_KERNEL_AREA	Kernel/pos.h	65;"	d
POS_LIST_H	KV/list/pos-list.h	11;"	d
POS_MAGIC	Kernel/pos.h	45;"	d
POS_MAP_ARRAY	Kernel/pos.h	56;"	d
POS_MAP_NR	Kernel/pos.h	49;"	d
POS_MAYREAD	Kernel/pos.h	87;"	d
POS_MAYWRITE	Kernel/pos.h	86;"	d
POS_MEM_DESC_BITMAP	Kernel/pos.h	69;"	d
POS_MODE_MASK	Kernel/pos.h	78;"	d
POS_NAME_LENGTH	Kernel/pos.h	48;"	d
POS_NAME_LENGTH	Library/pos-lib.h	15;"	d
POS_NAME_TABLE	Library/pos-lib.c	19;"	d	file:
POS_NORMAL	Kernel/pos.h	72;"	d
POS_NS_CONTAINER	Kernel/pos.h	61;"	d
POS_NS_FALSE	Kernel/pos_namespace.h	31;"	d
POS_NS_LIMIT	Kernel/pos_namespace.h	25;"	d
POS_NS_RATIO	Kernel/pos_namespace.h	23;"	d
POS_NS_RATIO_ACCESS	Kernel/pos_namespace.h	24;"	d
POS_NS_RECORD	Kernel/pos.h	60;"	d
POS_NS_TREND_BONUS	Kernel/pos_namespace.h	27;"	d
POS_NS_TREND_CAPITAL	Kernel/pos_namespace.h	26;"	d
POS_NS_TREND_PENALTY	Kernel/pos_namespace.h	28;"	d
POS_NS_TRIE_NODE	Kernel/pos.h	62;"	d
POS_NS_TRUE	Kernel/pos_namespace.h	30;"	d
POS_OTH_MODE	Kernel/pos.h	84;"	d
POS_OTH_SHIFT	Kernel/pos.h	81;"	d
POS_PVAL_DESCRIPTOR	Kernel/pos.h	59;"	d
POS_PVAL_DEVICE	Kernel/pos.h	58;"	d
POS_PVAL_TABLE	Kernel/pos.h	75;"	d
POS_TASK_PID	Kernel/pos.h	57;"	d
POS_TS_END	Library/pos-lib.h	60;"	d
POS_TS_INSERT	Library/pos-lib.h	62;"	d
POS_TS_REMOVE	Library/pos-lib.h	63;"	d
POS_TS_START	Library/pos-lib.h	59;"	d
POS_USER_AREA	Kernel/pos.h	64;"	d
POS_USR_MODE	Kernel/pos.h	82;"	d
POS_USR_SHIFT	Kernel/pos.h	79;"	d
POS_VM_AREA	Kernel/pos.h	55;"	d
POS_WRITE_VAUE	Library/pos-malloc.h	14;"	d
PREV_INUSE	Library/pos-malloc.h	486;"	d
REQUEST_OUT_OF_RANGE	Library/pos-malloc.h	460;"	d
SIZE_BITS	Library/pos-malloc.h	523;"	d
SIZE_SZ	Library/pos-malloc.h	174;"	d
SMALLBIN_WIDTH	Library/pos-malloc.h	795;"	d
T_NAME	Library/pos-log.c	18;"	d	file:
UPDATE	KV/workload_list.h	15;"	d
VISITOR_FN	KV/btree/@btree-type.h	137;"	d
VISITOR_FN	KV/btree/@btree-type.h	6;"	d
VISITOR_FN_T	KV/btree/@btree-type.h	/^typedef void (*VISITOR_FN_T)(void *elem, unsigned long opaque,$/;"	t
VISITOR_FN_T	KV/btree/@btree-type.h	138;"	d
VISITOR_FN_T	KV/btree/@btree-type.h	7;"	d
Void_t	Library/pos-malloc.h	38;"	d
Void_t	Library/pos-malloc.h	40;"	d
WORKLOAD_LIST_H	KV/workload_list.h	9;"	d
_BTREE_TP	KV/btree/@btree-type.h	140;"	d
_BTREE_TP	KV/btree/@btree-type.h	2;"	d
_LINUX_POS_H	Kernel/pos.h	16;"	d
_LINUX_POS_LIB_H	Library/pos-lib.h	9;"	d
_LINUX_POS_MALLOC_H	Library/pos-malloc.h	9;"	d
_LINUX_POS_NAMESPACE_H	Kernel/pos_namespace.h	14;"	d
__BTREE_TP	KV/btree/@btree-type.h	139;"	d
__BTREE_TP	KV/btree/@btree-type.h	1;"	d
__HASHTABLE_CWC22_H__	KV/hashtable/pos-hashtable.h	12;"	d
__HASHTABLE_PRIVATE_CWC22_H__	KV/hashtable/pos-hashtable_private.h	12;"	d
__STD_C	Library/pos-malloc.h	25;"	d
__STD_C	Library/pos-malloc.h	27;"	d
__btree_init	KV/btree/pos-btree.c	/^static inline void __btree_init(struct btree_head *head)$/;"	f	file:
__kernel_size_t	KV/btree/pos-btree.c	/^typedef unsigned long	__kernel_size_t;	\/\/ 64bit$/;"	t	file:
__size_t	Library/pos-malloc.h	/^typedef __SIZE_TYPE__ __size_t;$/;"	t
__size_t	Library/pos-malloc.h	127;"	d
__size_t	Library/pos-malloc.h	133;"	d
__size_t	Library/pos-malloc.h	134;"	d
add_del_ops	KV/workload_list.c	/^int add_del_ops(struct list *list, unsigned long cnt, int frequency)$/;"	f
addr	Kernel/pos.c	/^	unsigned long addr;$/;"	m	struct:seg_inform	file:
addr	Library/pos-lib.h	/^	unsigned long addr;$/;"	m	struct:seg_info
aligned_OK	Library/pos-malloc.h	447;"	d
alloc_tree	Library/pos-malloc.c	/^char* alloc_tree;$/;"	v
alloc_tree_init_flag	Library/pos-malloc.c	/^int alloc_tree_init_flag = 0;$/;"	v
alloc_tree_meta_update_flag	Library/pos-malloc.c	/^int alloc_tree_meta_update_flag = 0;$/;"	v
bin_at	Library/pos-malloc.h	660;"	d
bin_index	Library/pos-malloc.h	826;"	d
binmap	Library/pos-malloc.h	/^	unsigned int     binmap[BINMAPSIZE];	\/\/ 4개*64bit=256개    \/\/ 4개*32bit = 128개 $/;"	m	struct:malloc_state
bins	Library/pos-malloc.h	/^	mchunkptr        bins[NBINS * 2 - 2];	\/\/ 254$/;"	m	struct:malloc_state
bk	Library/pos-malloc.h	/^	struct malloc_chunk* bk;$/;"	m	struct:malloc_chunk	typeref:struct:malloc_chunk::malloc_chunk
bk_nextsize	Library/pos-malloc.h	/^	struct malloc_chunk* bk_nextsize;$/;"	m	struct:malloc_chunk	typeref:struct:malloc_chunk::malloc_chunk
bkey	KV/btree/pos-btree.c	/^static unsigned long *bkey(struct btree_geo *geo, unsigned long *node, int n)$/;"	f	file:
btree_close128	KV/btree/@btree-128.h	/^void btree_close128(char *name)$/;"	f
btree_destroy128	KV/btree/@btree-128.h	/^static inline void btree_destroy128(char *name)$/;"	f
btree_geo	KV/btree/pos-btree.c	/^struct btree_geo {$/;"	s	file:
btree_geo128	KV/btree/pos-btree.c	/^struct btree_geo btree_geo128 = {$/;"	v	typeref:struct:btree_geo
btree_grow	KV/btree/pos-btree.c	/^static int btree_grow(char *name, struct btree_head *head, struct btree_geo *geo)$/;"	f	file:
btree_head	KV/btree/pos-btree.h	/^struct btree_head {$/;"	s
btree_init128	KV/btree/@btree-128.h	/^static inline int btree_init128(char *name)$/;"	f
btree_insert128	KV/btree/@btree-128.h	/^static inline int btree_insert128(char *name, unsigned long k1, unsigned long k2,$/;"	f
btree_insert_level	KV/btree/pos-btree.c	/^static int btree_insert_level(char *name, struct btree_head *head,$/;"	f	file:
btree_lookup	KV/btree/pos-btree.c	/^void *btree_lookup(struct btree_head *head, struct btree_geo *geo,$/;"	f
btree_lookup128	KV/btree/@btree-128.h	/^static inline void *btree_lookup128(char *name, unsigned long k1, unsigned long k2)$/;"	f
btree_node_alloc	KV/btree/pos-btree.c	/^static unsigned long *btree_node_alloc(char *name)$/;"	f	file:
btree_open128	KV/btree/@btree-128.h	/^int btree_open128(char *name)$/;"	f
btree_remove128	KV/btree/@btree-128.h	/^static inline void *btree_remove128(char *name, unsigned long k1, unsigned long k2)$/;"	f
btree_remove_level	KV/btree/pos-btree.c	/^static int btree_remove_level(char *name, struct btree_head *head, $/;"	f	file:
btree_shrink	KV/btree/pos-btree.c	/^static void btree_shrink(char *name, struct btree_head *head, struct btree_geo *geo)$/;"	f	file:
btree_update128	KV/btree/@btree-128.h	/^static inline int btree_update128(char *name, unsigned long k1, unsigned long k2,$/;"	f
bval	KV/btree/pos-btree.c	/^static void *bval(struct btree_geo *geo, unsigned long *node, int n)$/;"	f	file:
bval2	KV/btree/pos-btree.c	/^static void *bval2(struct btree_geo *geo, unsigned long *node, int n)$/;"	f	file:
cached_hole_size	Kernel/pos.h	/^	unsigned long cached_hole_size;$/;"	m	struct:pos_superblock
check_valid_address	Library/pos-malloc.c	/^int check_valid_address(struct seg_info *head, Void_t *ptr)$/;"	f
checked_request2size	Library/pos-malloc.h	474;"	d
chunk2mem	Library/pos-malloc.h	434;"	d
chunk_at_offset	Library/pos-malloc.h	536;"	d
chunk_change_pointer	Library/pos-malloc.c	/^void chunk_change_pointer(mchunkptr chunk_ptr, Void_t *p , unsigned long offset)$/;"	f
chunk_is_first	Library/pos-malloc.h	493;"	d
chunk_is_last	Library/pos-malloc.h	496;"	d
chunksize	Library/pos-malloc.h	526;"	d
clear_fastchunks	Library/pos-malloc.h	943;"	d
clear_fastchunks_log	Library/pos-malloc.h	947;"	d
clear_init_key	Library/pos-malloc.h	956;"	d
clear_init_key_log	Library/pos-malloc.h	961;"	d
clear_inuse	Library/pos-malloc.h	546;"	d
clear_inuse_bit_at_offset	Library/pos-malloc.h	566;"	d
clear_inuse_bit_at_offset_log	Library/pos-malloc.h	573;"	d
clear_inuse_log	Library/pos-malloc.h	553;"	d
clear_log_cnt	Library/pos-log.c	/^void clear_log_cnt(void)$/;"	f
clearpair	KV/btree/pos-btree.c	/^static void clearpair(struct btree_geo *geo, unsigned long *node, int n)$/;"	f	file:
clearpair_log	KV/btree/pos-btree.c	/^static void clearpair_log(char *name, struct btree_geo *geo, unsigned long *node, int n)$/;"	f	file:
clflush	Library/pos-log.c	/^static inline void clflush(volatile void *__p)$/;"	f	file:
clflush_cnt	Library/pos-log.c	/^int clflush_cnt = 0;$/;"	v
close_func	KV/main.c	/^	void (*close_func)(char *);$/;"	m	struct:function_ptr	file:
cnt_accesses	Kernel/pos_namespace.h	/^	int cnt_accesses;$/;"	m	struct:pos_ns_container
cnt_capital	Kernel/pos_namespace.h	/^	int cnt_capital;$/;"	m	struct:pos_ns_container
cnt_direct_hits	Kernel/pos_namespace.h	/^	int cnt_direct_hits;$/;"	m	struct:pos_ns_container
cnt_limit	Kernel/pos_namespace.h	/^	int cnt_limit;$/;"	m	struct:pos_ns_container
create_hashtable	KV/hashtable/pos-hashtable.c	/^create_hashtable(char *name, unsigned int minsize,$/;"	f
create_list_bdb	KV/workload_list.c	/^int create_list_bdb(struct list *list, unsigned long rec_num)$/;"	f
d_gid	Kernel/pos.h	/^	gid_t	d_gid;$/;"	m	struct:pos_descriptor
d_mode	Kernel/pos.h	/^	fmode_t d_mode;$/;"	m	struct:pos_descriptor
d_uid	Kernel/pos.h	/^	uid_t	d_uid;$/;"	m	struct:pos_descriptor
d_vm_list	Kernel/pos.h	/^	struct list_head d_vm_list;$/;"	m	struct:pos_descriptor	typeref:struct:pos_descriptor::list_head
data	Library/malloc_free.c	/^	unsigned long data[127];$/;"	m	struct:pos_list	file:
data	Library/malloc_free.c	/^	unsigned long data[3];$/;"	m	struct:pos_list1	file:
data	Library/malloc_free.c	/^	unsigned long data[6];$/;"	m	struct:pos_list2	file:
db	KV/main_bdb.c	/^DB *db = NULL;$/;"	v
db_env	KV/main_bdb.c	/^DB_ENV *db_env = NULL;$/;"	v
db_envp	KV/workload_list.c	/^DB_ENV *db_envp = NULL;$/;"	v
dbp	KV/workload_list.c	/^DB *dbp = NULL;$/;"	v
debug_printf	Library/pos-lib.c	/^void debug_printf(char *string)$/;"	f
default_hashfunction	KV/hashtable/pos-hashtable.c	/^unsigned long default_hashfunction(unsigned long *key)$/;"	f
default_key_eq_fn	KV/hashtable/pos-hashtable.c	/^int default_key_eq_fn(unsigned long *key1, unsigned long *key2)$/;"	f
default_test	Library/malloc_free.c	/^void default_test(void)$/;"	f
delete_list	KV/workload_list.c	/^int delete_list(struct list *list)$/;"	f
depth	Kernel/pos_namespace.h	/^	int depth;			\/\/ depth field must be first one in this structure.$/;"	m	struct:pos_ns_trie_node
desc	Kernel/pos_namespace.h	/^	struct pos_descriptor *desc;$/;"	m	struct:pos_ns_record	typeref:struct:pos_ns_record::pos_descriptor
desc_rb	Kernel/pos.h	/^	struct rb_node desc_rb;$/;"	m	struct:pos_pval_descriptor	typeref:struct:pos_pval_descriptor::rb_node
destroy	KV/btree/@btree-type.h	/^static inline void BTREE_FN(destroy)(BTREE_TYPE_HEAD *head)$/;"	f
dev	Kernel/pos.h	/^	dev_t dev;$/;"	m	struct:pos_pval_device
dev_rb	Kernel/pos.h	/^	struct rb_root dev_rb;$/;"	m	struct:pos_pval_device	typeref:struct:pos_pval_device::rb_root
do_experiment	KV/main.c	/^int do_experiment(struct list *list, char *store_name, unsigned long rec_num,$/;"	f
do_experiment	KV/main_bdb.c	/^int do_experiment(struct list *list, char *store_name, unsigned long rec_num, $/;"	f
do_pos_area_fault	Kernel/pos.c	/^EXPORT_SYMBOL(do_pos_area_fault);$/;"	v
do_pos_area_fault	Kernel/pos.c	/^int do_pos_area_fault(struct mm_struct *mm, struct vm_area_struct *vma, $/;"	f
do_pos_section_fault	Kernel/pos.c	/^EXPORT_SYMBOL(do_pos_section_fault);$/;"	v
do_pos_section_fault	Kernel/pos.c	/^int do_pos_section_fault(struct mm_struct *mm, struct vm_area_struct *vma, $/;"	f
entry	KV/hashtable/pos-hashtable_private.h	/^struct entry$/;"	s
entrycount	KV/hashtable/pos-hashtable_private.h	/^    unsigned long entrycount;$/;"	m	struct:hashtable
eqfn	KV/hashtable/pos-hashtable_private.h	/^    int (*eqfn) (unsigned long *k1, unsigned long *k2);$/;"	m	struct:hashtable
fastbin	Library/pos-malloc.h	896;"	d
fastbin_index	Library/pos-malloc.h	899;"	d
fastbinsY	Library/pos-malloc.h	/^	mfastbinptr      fastbinsY[NFASTBINS];	\/\/ 10  <-default로는 8개만 사용됨$/;"	m	struct:malloc_state
fd	Library/pos-malloc.h	/^	struct malloc_chunk* fd;         \/* double links -- used only if free. *\/$/;"	m	struct:malloc_chunk	typeref:struct:malloc_chunk::malloc_chunk
fd_nextsize	Library/pos-malloc.h	/^	struct malloc_chunk* fd_nextsize; \/* double links -- used only if free. *\/$/;"	m	struct:malloc_chunk	typeref:struct:malloc_chunk::malloc_chunk
find_cache	Kernel/pos.h	/^	struct pos_pval_descriptor *find_cache;$/;"	m	struct:pos_pval_device	typeref:struct:pos_pval_device::pos_pval_descriptor
find_cache	Kernel/pos.h	/^	struct pos_vm_area *find_cache;$/;"	m	struct:pos_superblock	typeref:struct:pos_superblock::pos_vm_area
find_level	KV/btree/pos-btree.c	/^static unsigned long *find_level(char *name, struct btree_head *head, struct btree_geo *geo,$/;"	f	file:
first	Library/pos-malloc.h	667;"	d
flags	Library/pos-malloc.h	/^	int flags;$/;"	m	struct:malloc_state
freeF_victimL	Library/malloc_free.c	/^void freeF_victimL(void)$/;"	f
freeF_victimM_freeL	Library/malloc_free.c	/^void freeF_victimM_freeL(void)$/;"	f
freeF_victimM_freeM	Library/malloc_free.c	/^void freeF_victimM_freeM(void)$/;"	f
freeF_victimM_inuseL	Library/malloc_free.c	/^void freeF_victimM_inuseL(void)$/;"	f
freeM_victimL	Library/malloc_free.c	/^void freeM_victimL(void)$/;"	f
freeM_victimM_freeL	Library/malloc_free.c	/^void freeM_victimM_freeL(void)$/;"	f
freeM_victimM_freeM	Library/malloc_free.c	/^void freeM_victimM_freeM(void)$/;"	f
freeM_victimM_inuseM	Library/malloc_free.c	/^void freeM_victimM_inuseM(void)$/;"	f
free_area_cache	Kernel/pos.h	/^	unsigned long free_area_cache;$/;"	m	struct:pos_superblock
func_ptr	KV/main.c	/^struct function_ptr *func_ptr;$/;"	v	typeref:struct:function_ptr
function_ptr	KV/main.c	/^struct function_ptr {$/;"	s	file:
gc_list	Kernel/pos.h	/^	struct list_head gc_list; \/\/init needed$/;"	m	struct:pos_superblock	typeref:struct:pos_superblock::list_head
gc_member	Kernel/pos_namespace.h	/^	struct list_head gc_member;$/;"	m	struct:pos_ns_record	typeref:struct:pos_ns_record::list_head
gc_node	Library/pos-malloc.c	/^typedef struct gc_node {$/;"	s	file:
get_binmap	Library/pos-malloc.h	869;"	d
get_max_fast	Library/pos-malloc.h	974;"	d
get_prev	KV/btree/@btree-type.h	/^static inline void *BTREE_FN(get_prev)(BTREE_TYPE_HEAD *head, BTREE_KEYTYPE *key)$/;"	f
getfill	KV/btree/pos-btree.c	/^static int getfill(struct btree_geo *geo, unsigned long *node, int start)$/;"	f	file:
getpos	KV/btree/pos-btree.c	/^static int getpos(struct btree_geo *geo, unsigned long *node,$/;"	f	file:
global_max_fast	Library/pos-malloc.c	/^INTERNAL_SIZE_T global_max_fast = 144;$/;"	v
grim_visitor	KV/btree/@btree-type.h	/^static inline size_t BTREE_FN(grim_visitor)(BTREE_TYPE_HEAD *head,$/;"	f
h	KV/hashtable/pos-hashtable_private.h	/^    unsigned long h; $/;"	m	struct:entry
hash	KV/hashtable/pos-hashtable.c	/^hash(struct hashtable *h, unsigned long *k)$/;"	f
hashfn	KV/hashtable/pos-hashtable_private.h	/^    unsigned long (*hashfn) (unsigned long *k);$/;"	m	struct:hashtable
hashtable	KV/hashtable/pos-hashtable_private.h	/^struct hashtable {$/;"	s
hashtable_destroy	KV/hashtable/pos-hashtable.c	/^hashtable_destroy(char *name)$/;"	f
hashtable_expand	KV/hashtable/pos-hashtable.c	/^hashtable_expand(char *name, struct hashtable *h)$/;"	f	file:
hashtable_insert	KV/hashtable/pos-hashtable.c	/^hashtable_insert(char *name, struct hashtable *h, unsigned long *k, unsigned long *v, $/;"	f
hashtable_remove	KV/hashtable/pos-hashtable.c	/^hashtable_remove(char *name, struct hashtable *h, unsigned long *k)$/;"	f
hashtable_search	KV/hashtable/pos-hashtable.c	/^hashtable_search(struct hashtable *h, unsigned long *k)$/;"	f
have_fastchunks	Library/pos-malloc.h	941;"	d
have_init_key	Library/pos-malloc.h	954;"	d
head	KV/list/pos-list.h	/^	struct list_node *head;$/;"	m	struct:list_head	typeref:struct:list_head::list_node
head	KV/workload_list.h	/^	struct node *head;$/;"	m	struct:list	typeref:struct:list::node
head	Kernel/pos_namespace.h	/^	struct pos_ns_record *head;	\/\/ list data structure$/;"	m	struct:pos_ns_container	typeref:struct:pos_ns_container::pos_ns_record
height	KV/btree/pos-btree.h	/^	unsigned long height;$/;"	m	struct:btree_head
idx2bit	Library/pos-malloc.h	865;"	d
idx2block	Library/pos-malloc.h	864;"	d
in_smallbin_range	Library/pos-malloc.h	798;"	d
indexFor	KV/hashtable/pos-hashtable_private.h	/^indexFor(unsigned long tablelength, unsigned long hashvalue) {$/;"	f
init	KV/btree/@btree-type.h	/^static inline int BTREE_FN(init)(BTREE_TYPE_HEAD *head)$/;"	f
init_bdb	KV/workload_list.c	/^int init_bdb(char *store_name)$/;"	f
init_experiment	KV/main.c	/^int init_experiment(char *store_name, unsigned long rec_num)$/;"	f
init_experiment	KV/main_bdb.c	/^int init_experiment(char *store_name)$/;"	f
init_mempool	KV/btree/@btree-type.h	/^static inline void BTREE_FN(init_mempool)(BTREE_TYPE_HEAD *head,$/;"	f
ino	Kernel/pos.h	/^	unsigned long ino;		\/\/ key$/;"	m	struct:pos_pval_descriptor
insert	KV/btree/@btree-type.h	/^static inline int BTREE_FN(insert)(BTREE_TYPE_HEAD *head, BTREE_KEYTYPE key,$/;"	f
insert_func	KV/main.c	/^	int (*insert_func)(char *, void *, void *, unsigned long);$/;"	m	struct:function_ptr	file:
insert_to_unsorted	Library/pos-malloc.h	745;"	d
insert_to_unsorted_log	Library/pos-malloc.h	758;"	d
inuse	Library/pos-malloc.h	539;"	d
inuseF_victimL	Library/malloc_free.c	/^void inuseF_victimL(void)$/;"	f
inuseF_victimM_freeL	Library/malloc_free.c	/^void inuseF_victimM_freeL(void)$/;"	f
inuseM_victimL	Library/malloc_free.c	/^void inuseM_victimL(void)$/;"	f
inuseM_victimM_freeM	Library/malloc_free.c	/^void inuseM_victimM_freeM(void)$/;"	f
inuse_bit_at_offset	Library/pos-malloc.h	560;"	d
k	KV/hashtable/pos-hashtable_private.h	/^    unsigned long k[KEY_SIZE];$/;"	m	struct:entry
key	KV/list/pos-list.h	/^	unsigned long key[KEY_SIZE];$/;"	m	struct:list_node
key	KV/workload_list.h	/^	unsigned long key;$/;"	m	struct:node
key	Library/pos-malloc.c	/^  unsigned long key;$/;"	m	struct:gc_node	file:
key_cmp	KV/list/pos-list.c	/^int key_cmp(unsigned long *key1, unsigned long *key2)$/;"	f
keycmp	KV/btree/pos-btree.c	/^static int keycmp(struct btree_geo *geo, unsigned long *node, int pos,$/;"	f	file:
keylen	KV/btree/pos-btree.c	/^	int keylen;$/;"	m	struct:btree_geo	file:
keyzero	KV/btree/pos-btree.c	/^static int keyzero(struct btree_geo *geo, unsigned long *key)$/;"	f	file:
kv_type	KV/main.c	/^int kv_type;$/;"	v
kv_type	KV/main_bdb.c	/^int kv_type;$/;"	v
largebin_index	Library/pos-malloc.h	823;"	d
largebin_index_32	Library/pos-malloc.h	804;"	d
largebin_index_64	Library/pos-malloc.h	815;"	d
last	KV/btree/@btree-type.h	/^static inline void *BTREE_FN(last)(BTREE_TYPE_HEAD *head, BTREE_KEYTYPE *key)$/;"	f
last	Library/pos-malloc.h	668;"	d
last_chunk_pointer	Library/pos-malloc.h	/^	mchunkptr last_chunk_pointer;$/;"	m	struct:malloc_state
last_remainder	Library/pos-malloc.h	/^	mchunkptr        last_remainder;$/;"	m	struct:malloc_state
level	Kernel/pos.h	/^	int level;$/;"	m	struct:pos_map_array
list	KV/workload_list.h	/^struct list {$/;"	s
list_from_file	KV/workload_list.c	/^unsigned long list_from_file(struct list *list, unsigned long rec_num, char *file_name)$/;"	f
list_head	KV/list/pos-list.h	/^struct list_head {$/;"	s
list_node	KV/list/pos-list.h	/^struct list_node {$/;"	s
list_to_file	KV/workload_list.c	/^unsigned long list_to_file(struct list *list, char *file_name)$/;"	f
loadlimit	KV/hashtable/pos-hashtable_private.h	/^    unsigned long loadlimit;$/;"	m	struct:hashtable
log_addr	Library/pos-lib.h	/^	void *log_addr;	\/\/ Start address of object storage for log$/;"	m	struct:pos_name_entry
log_cnt	Library/pos-log.c	/^int log_cnt = 0;$/;"	v
log_flag	KV/main_bdb.c	/^int log_flag = 1;$/;"	v
longcmp	KV/btree/pos-btree.c	/^static int longcmp(const unsigned long *l1, const unsigned long *l2, size_t n)$/;"	f	file:
longcpy	KV/btree/pos-btree.c	/^static unsigned long *longcpy(unsigned long *dest, const unsigned long *src,$/;"	f	file:
longcpy_log	KV/btree/pos-btree.c	/^static unsigned long *longcpy_log(char *name, unsigned long *dest, const unsigned long *src,$/;"	f	file:
longset	KV/btree/pos-btree.c	/^static unsigned long *longset(unsigned long *s, unsigned long c, size_t n)$/;"	f	file:
longset_log	KV/btree/pos-btree.c	/^static unsigned long *longset_log(char *name, unsigned long *s, unsigned long c, size_t n)$/;"	f	file:
lookup	KV/btree/@btree-type.h	/^static inline void *BTREE_FN(lookup)(BTREE_TYPE_HEAD *head, BTREE_KEYTYPE key)$/;"	f
lookup_func	KV/main.c	/^	void *(*lookup_func)(char *, void *);$/;"	m	struct:function_ptr	file:
lookup_pointer	Library/pos-malloc.c	/^Void_t* lookup_pointer(mchunkptr p , unsigned long offset)$/;"	f
magic	Kernel/pos.h	/^	unsigned long long magic;$/;"	m	struct:pos_superblock
main	KV/main.c	/^int main(int argc, char *argv[])$/;"	f
main	KV/main_bdb.c	/^int main(int argc, char *argv[])$/;"	f
main	Library/malloc_free.c	/^int main(int argc, char *argv[])$/;"	f
malloc_chunk	Library/pos-malloc.h	/^struct malloc_chunk {$/;"	s
malloc_state	Library/pos-malloc.h	/^struct malloc_state {$/;"	s
map_array	Kernel/pos.h	/^	struct pos_map_array *map_array;$/;"	m	struct:pos_pval_descriptor	typeref:struct:pos_pval_descriptor::pos_map_array
map_array	Kernel/pos.h	/^	struct pos_map_array *map_array;$/;"	m	struct:pos_vm_area	typeref:struct:pos_vm_area::pos_map_array
mark_bin	Library/pos-malloc.h	867;"	d
mark_bin_log	Library/pos-malloc.h	872;"	d
max_load_factor	KV/hashtable/pos-hashtable.c	/^const float max_load_factor = 0.65;$/;"	v
max_system_mem	Library/pos-malloc.h	/^	INTERNAL_SIZE_T max_system_mem;$/;"	m	struct:malloc_state
mb	Library/pos-log.c	482;"	d	file:
mbinptr	Library/pos-malloc.h	/^typedef struct malloc_chunk* mbinptr;$/;"	t	typeref:struct:malloc_chunk
mchunkptr	Library/pos-malloc.h	/^typedef struct malloc_chunk* mchunkptr;$/;"	t	typeref:struct:malloc_chunk
mem2chunk	Library/pos-malloc.h	435;"	d
merge	KV/btree/@btree-type.h	/^static inline int BTREE_FN(merge)(BTREE_TYPE_HEAD *target,$/;"	f
merge	KV/btree/pos-btree.c	/^static void merge(char *name, struct btree_head *head,$/;"	f	file:
mfastbinptr	Library/pos-malloc.h	/^typedef struct malloc_chunk* mfastbinptr;$/;"	t	typeref:struct:malloc_chunk
misaligned_chunk	Library/pos-malloc.h	449;"	d
mode	Kernel/pos.h	/^	fmode_t mode;$/;"	m	struct:pos_task_pid
mstate	Library/pos-lib.h	/^	void *mstate;	\/\/ Start address of prime region (prime segment)$/;"	m	struct:pos_name_entry
mstate	Library/pos-malloc.h	/^typedef struct malloc_state * mstate;$/;"	t	typeref:struct:malloc_state
mutex	Library/pos-malloc.h	/^	mutex_t mutex;$/;"	m	struct:malloc_state
mutex_init	Library/pos-malloc.h	63;"	d
mutex_lock	Library/pos-malloc.h	64;"	d
mutex_t	Library/pos-malloc.h	/^typedef int mutex_t;$/;"	t
mutex_trylock	Library/pos-malloc.h	65;"	d
mutex_unlock	Library/pos-malloc.h	66;"	d
name	Library/pos-lib.h	/^	char name[POS_NAME_LENGTH];$/;"	m	struct:pos_name_entry
name_table	Library/pos-lib.c	/^struct pos_name_entry *name_table[POS_NAME_TABLE];$/;"	v	typeref:struct:pos_name_entry
next	KV/hashtable/pos-hashtable_private.h	/^    struct entry *next;$/;"	m	struct:entry	typeref:struct:entry::entry
next	KV/list/pos-list.h	/^	struct list_node *next;$/;"	m	struct:list_node	typeref:struct:list_node::list_node
next	KV/workload_list.h	/^	struct node *next;$/;"	m	struct:node	typeref:struct:node::node
next	Kernel/pos.h	/^	struct pos_pval_device *next;$/;"	m	struct:pos_pval_device	typeref:struct:pos_pval_device::pos_pval_device
next	Kernel/pos_namespace.h	/^	struct pos_ns_record *next;$/;"	m	struct:pos_ns_record	typeref:struct:pos_ns_record::pos_ns_record
next	Library/malloc_free.c	/^	struct pos_list *next;$/;"	m	struct:pos_list	typeref:struct:pos_list::pos_list	file:
next	Library/malloc_free.c	/^	struct pos_list *next;$/;"	m	struct:pos_list1	typeref:struct:pos_list1::pos_list	file:
next	Library/malloc_free.c	/^	struct pos_list *next;$/;"	m	struct:pos_list2	typeref:struct:pos_list2::pos_list	file:
next	Library/pos-lib.h	/^	struct pos_name_entry *next;$/;"	m	struct:pos_name_entry	typeref:struct:pos_name_entry::pos_name_entry
next_bin	Library/pos-malloc.h	664;"	d
next_chunk	Library/pos-malloc.h	530;"	d
no_longs	KV/btree/pos-btree.c	/^	int no_longs;$/;"	m	struct:btree_geo	file:
no_pairs	KV/btree/pos-btree.c	/^	int no_pairs;$/;"	m	struct:btree_geo	file:
node	KV/btree/pos-btree.h	/^	unsigned long *node;$/;"	m	struct:btree_head
node	KV/workload_list.h	/^struct node {$/;"	s
node	Library/pos-malloc.c	/^  struct rb_node node;$/;"	m	struct:gc_node	typeref:struct:gc_node::rb_node	file:
node_info	Library/pos-lib.h	/^struct node_info {$/;"	s
node_obj	Library/pos-malloc.h	/^	struct node_info node_obj;$/;"	m	struct:malloc_state	typeref:struct:malloc_state::node_info
nr_pages	Kernel/pos.h	/^	unsigned long nr_pages;$/;"	m	struct:pos_vm_area
ns_count	Kernel/pos.h	/^	int ns_count;$/;"	m	struct:pos_superblock
ns_record	Kernel/pos.h	/^	struct pos_ns_record *ns_record;$/;"	m	struct:pos_vm_area	typeref:struct:pos_vm_area::pos_ns_record
obj_storage_type	Kernel/pos.h	/^	short obj_storage_type;$/;"	m	struct:pos_descriptor
offsetof	Library/pos-malloc.h	654;"	d
open_func	KV/main.c	/^	int (*open_func)(char *);$/;"	m	struct:function_ptr	file:
persistency_test	Library/malloc_free.c	/^void persistency_test(void)$/;"	f
pfns	Kernel/pos.h	/^	unsigned long pfns[POS_MAP_NR];	\/\/ last level이 아닌 경우엔 포인터로 변환됨$/;"	m	struct:pos_map_array
pid_nr	Kernel/pos.h	/^	pid_t pid_nr;$/;"	m	struct:pos_task_pid
pn	Kernel/pos.h	/^	unsigned long pn;		\/\/ first page number$/;"	m	struct:pos_map_array
pos_alloc_page	Kernel/pos.c	/^struct page *pos_alloc_page(int kind)$/;"	f
pos_btree_close	KV/btree/pos-btree.c	/^void pos_btree_close(char *name)$/;"	f
pos_btree_destroy	KV/btree/pos-btree.c	/^int pos_btree_destroy(char *name)$/;"	f
pos_btree_init	KV/btree/pos-btree.c	/^int pos_btree_init(char *name)$/;"	f
pos_btree_insert	KV/btree/pos-btree.c	/^int pos_btree_insert(char *name, void *_key, void *_val, unsigned long val_size)$/;"	f
pos_btree_lookup	KV/btree/pos-btree.c	/^void *pos_btree_lookup(char *name, void *_key)$/;"	f
pos_btree_open	KV/btree/pos-btree.c	/^int pos_btree_open(char *name)$/;"	f
pos_btree_remove	KV/btree/pos-btree.c	/^int pos_btree_remove(char *name, void *_key)$/;"	f
pos_check_unsafe_pointer	Library/pos-malloc.c	/^void pos_check_unsafe_pointer(char *name)$/;"	f
pos_check_unsafe_region	Library/pos-malloc.c	/^void pos_check_unsafe_region(char *name, mstate av, struct seg_info *head, mchunkptr chunk_ptr)$/;"	f
pos_check_unsafe_segment	Library/pos-malloc.c	/^void pos_check_unsafe_segment(char *name, mstate av, struct seg_info *head, Void_t *first_chunk)$/;"	f
pos_clflush_cache_range	Library/pos-log.c	/^void pos_clflush_cache_range(void *vaddr, unsigned int size)$/;"	f
pos_copy_and_free_map_array	Kernel/pos.c	/^int pos_copy_and_free_map_array(struct pos_vm_area *dst_vma, struct pos_map_array *src_map)$/;"	f
pos_copy_partial_map_array	Kernel/pos.c	/^int pos_copy_partial_map_array(struct pos_vm_area *dst_vma, struct pos_map_array *src_map,$/;"	f
pos_create	Library/pos-lib.c	/^pos_create(char *name)$/;"	f
pos_create_hashtable	KV/hashtable/pos-hashtable.c	/^pos_create_hashtable(char *name, unsigned int minsize,$/;"	f
pos_create_or_merge_vma	Kernel/pos.c	/^int pos_create_or_merge_vma(struct pos_superblock *sb,$/;"	f
pos_delete	Library/pos-lib.c	/^pos_delete(char *name)$/;"	f
pos_delete_or_split_vma	Kernel/pos.c	/^int pos_delete_or_split_vma(struct pos_superblock *sb,$/;"	f
pos_desc_struct_cachep	Kernel/pos.h	/^	struct kmem_cache *pos_desc_struct_cachep;$/;"	m	struct:pos_superblock	typeref:struct:pos_superblock::kmem_cache
pos_descriptor	Kernel/pos.h	/^struct pos_descriptor$/;"	s
pos_find_and_alloc_pfn	Kernel/pos.c	/^unsigned long pos_find_and_alloc_pfn(struct pos_vm_area *vma, unsigned long addr)$/;"	f
pos_find_and_alloc_pfn_pval	Kernel/pos.c	/^unsigned long pos_find_and_alloc_pfn_pval(struct pos_pval_descriptor *pval_desc, unsigned long addr, struct vm_area_struct *vma)$/;"	f
pos_find_and_alloc_pval_desc	Kernel/pos.c	/^unsigned long pos_find_and_alloc_pval_desc(unsigned long address, struct vm_area_struct *vma)$/;"	f
pos_find_and_remove_pval_desc	Kernel/pos.c	/^EXPORT_SYMBOL(pos_find_and_remove_pval_desc);$/;"	v
pos_find_and_remove_pval_desc	Kernel/pos.c	/^void pos_find_and_remove_pval_desc(struct inode *inode)$/;"	f
pos_find_pval_desc	Kernel/pos.c	/^pos_find_pval_desc(struct pos_pval_device *pval_dev, unsigned long ino)$/;"	f
pos_find_pval_desc_prepare	Kernel/pos.c	/^pos_find_pval_desc_prepare(struct pos_pval_device *pval_dev, unsigned long ino,$/;"	f	file:
pos_find_vma	Kernel/pos.c	/^struct pos_vm_area *pos_find_vma(struct pos_superblock *sb, unsigned long addr)$/;"	f
pos_find_vma_prepare	Kernel/pos.c	/^pos_find_vma_prepare(struct pos_superblock *sb, unsigned long addr,$/;"	f	file:
pos_find_vma_prev	Kernel/pos.c	/^pos_find_vma_prev(struct pos_superblock *sb, unsigned long addr,$/;"	f
pos_free_map_array	Kernel/pos.c	/^void pos_free_map_array(struct pos_map_array *map_array)$/;"	f
pos_free_page	Kernel/pos.c	/^void pos_free_page(unsigned long pfn)$/;"	f
pos_gc_node_insert	Library/pos-malloc.c	/^int pos_gc_node_insert(struct rb_root *root, GC_NODE *key_node)$/;"	f
pos_get_prime_object	Library/pos-malloc.c	/^pos_get_prime_object(char *name)$/;"	f
pos_get_sb	Kernel/pos.c	/^struct pos_superblock* pos_get_sb(void)$/;"	f
pos_get_unmapped_area	Kernel/pos.c	/^unsigned long pos_get_unmapped_area(unsigned long len, struct pos_vm_area **prev_vma)$/;"	f
pos_hashtable_close	KV/hashtable/pos-hashtable.c	/^void pos_hashtable_close(char *name)$/;"	f
pos_hashtable_destroy	KV/hashtable/pos-hashtable.c	/^pos_hashtable_destroy(char *name)$/;"	f
pos_hashtable_insert	KV/hashtable/pos-hashtable.c	/^pos_hashtable_insert(char *name, void *_k, void *_v, unsigned long v_size)$/;"	f
pos_hashtable_open	KV/hashtable/pos-hashtable.c	/^int pos_hashtable_open(char *name)$/;"	f
pos_hashtable_remove	KV/hashtable/pos-hashtable.c	/^pos_hashtable_remove(char *name, void *_k)$/;"	f
pos_hashtable_search	KV/hashtable/pos-hashtable.c	/^pos_hashtable_search(char *name, void *_k)$/;"	f
pos_init	Kernel/pos.c	/^EXPORT_SYMBOL(pos_init);$/;"	v
pos_init	Kernel/pos.c	/^void pos_init(void)$/;"	f
pos_insert_pfn_to_map_array	Kernel/pos.c	/^int pos_insert_pfn_to_map_array(struct pos_vm_area *vma, $/;"	f
pos_insert_pval_desc	Kernel/pos.c	/^int pos_insert_pval_desc(struct pos_pval_device *pval_dev, struct pos_pval_descriptor *pval_desc)$/;"	f
pos_insert_vm_area	Kernel/pos.c	/^int pos_insert_vm_area(struct pos_superblock *sb, struct pos_vm_area *vma)$/;"	f
pos_int_free	Library/pos-malloc.c	/^pos_int_free(char *name, mstate av, mchunkptr p, int flag)$/;"	f
pos_int_realloc	Library/pos-malloc.c	/^pos_int_realloc(char *name, mstate av, mchunkptr oldp, INTERNAL_SIZE_T oldsize,$/;"	f
pos_is_mapped	Library/pos-lib.c	/^pos_is_mapped(char *name)$/;"	f
pos_kfree	Kernel/pos.c	/^void pos_kfree(void *addr)$/;"	f
pos_kmalloc	Kernel/pos.c	/^void *pos_kmalloc(unsigned long size)$/;"	f
pos_kmem_cache_alloc	Kernel/pos.c	/^void *pos_kmem_cache_alloc(struct kmem_cache *cachep, gfp_t flags)$/;"	f
pos_kmem_cache_create	Kernel/pos.c	/^pos_kmem_cache_create (const char *name, size_t size, size_t align,$/;"	f
pos_kmem_cache_destroy	Kernel/pos.c	/^void pos_kmem_cache_destroy(struct kmem_cache *cachep)$/;"	f
pos_kmem_cache_free	Kernel/pos.c	/^void pos_kmem_cache_free(struct kmem_cache *cachep, void *objp)$/;"	f
pos_level_to_pages	Kernel/pos.c	/^unsigned long pos_level_to_pages(int level)$/;"	f
pos_list	Library/malloc_free.c	/^struct pos_list$/;"	s	file:
pos_list1	Library/malloc_free.c	/^struct pos_list1$/;"	s	file:
pos_list2	Library/malloc_free.c	/^struct pos_list2$/;"	s	file:
pos_list_close	KV/list/pos-list.c	/^void pos_list_close(char *name)$/;"	f
pos_list_destroy	KV/list/pos-list.c	/^int pos_list_destroy(char *name)$/;"	f
pos_list_init	KV/list/pos-list.c	/^int pos_list_init(char *name)$/;"	f
pos_list_insert	KV/list/pos-list.c	/^int pos_list_insert(char *name, void *_key, void *_val, unsigned long val_size)$/;"	f
pos_list_lookup	KV/list/pos-list.c	/^void *pos_list_lookup(char *name, void *_key)$/;"	f
pos_list_open	KV/list/pos-list.c	/^int pos_list_open(char *name)$/;"	f
pos_list_remove	KV/list/pos-list.c	/^int pos_list_remove(char *name, void *_key)$/;"	f
pos_log_clear_free	Library/pos-log.c	/^int pos_log_clear_free(unsigned long *log_addr)$/;"	f
pos_log_clear_ptr	Library/pos-log.c	/^int pos_log_clear_ptr(unsigned long *log_addr)$/;"	f
pos_log_create	Library/pos-log.c	/^int pos_log_create(char *name)$/;"	f
pos_log_delete	Library/pos-log.c	/^int pos_log_delete(char *name)$/;"	f
pos_log_insert_kv_ptr	Library/pos-log.c	/^int pos_log_insert_kv_ptr(char *name, unsigned long addr, unsigned long value)$/;"	f
pos_log_insert_malloc_free	Library/pos-log.c	/^int pos_log_insert_malloc_free(char *name, unsigned long addr, unsigned long value)$/;"	f
pos_log_insert_malloc_ptr	Library/pos-log.c	/^int pos_log_insert_malloc_ptr(char *name, unsigned long addr, unsigned long value)$/;"	f
pos_log_map	Library/pos-log.c	/^int pos_log_map(char *name)$/;"	f
pos_log_unmap	Library/pos-log.c	/^int pos_log_unmap(char *name)$/;"	f
pos_lookup_mstate	Library/pos-lib.c	/^pos_lookup_mstate(char* name)$/;"	f
pos_lookup_name_entry	Library/pos-lib.c	/^pos_lookup_name_entry(char *name)$/;"	f
pos_malloc_init_state	Library/pos-malloc.c	/^pos_malloc_init_state(char *name, mstate av)$/;"	f
pos_map	Library/pos-lib.c	/^pos_map(char* name)$/;"	f
pos_map_array	Kernel/pos.h	/^struct pos_map_array$/;"	s
pos_map_array_struct_cachep	Kernel/pos.h	/^	struct kmem_cache *pos_map_array_struct_cachep;$/;"	m	struct:pos_superblock	typeref:struct:pos_superblock::kmem_cache
pos_map_superblock	Kernel/pos.c	/^struct pos_superblock *pos_map_superblock(void)$/;"	f
pos_map_vma	Kernel/pos.c	/^int pos_map_vma(struct mm_struct *mm, unsigned long start, unsigned long end,$/;"	f
pos_merge_map_array	Kernel/pos.c	/^int pos_merge_map_array(struct pos_vm_area *dst_vma, struct pos_vm_area *src_vma)$/;"	f
pos_name_entry	Library/pos-lib.h	/^struct pos_name_entry {$/;"	s
pos_name_table_index	Library/pos-lib.c	/^pos_name_table_index(char *name)$/;"	f
pos_ns_burst	Kernel/pos_namespace.c	/^void pos_ns_burst(struct pos_ns_trie_node *prev_trie_node, int prev_index)$/;"	f
pos_ns_cont_struct_cachep	Kernel/pos.h	/^	struct kmem_cache *pos_ns_cont_struct_cachep;$/;"	m	struct:pos_superblock	typeref:struct:pos_superblock::kmem_cache
pos_ns_container	Kernel/pos_namespace.h	/^struct pos_ns_container$/;"	s
pos_ns_delete	Kernel/pos_namespace.c	/^struct pos_ns_record *pos_ns_delete(struct pos_ns_trie_node *root,$/;"	f
pos_ns_delete_record	Kernel/pos_namespace.c	/^struct pos_ns_record *pos_ns_delete_record(struct pos_ns_container *container,$/;"	f
pos_ns_insert	Kernel/pos_namespace.c	/^struct pos_ns_record *pos_ns_insert(struct pos_ns_trie_node *root,$/;"	f
pos_ns_insert_record	Kernel/pos_namespace.c	/^void pos_ns_insert_record(struct pos_ns_container *container, struct pos_ns_record *record)$/;"	f
pos_ns_limit_burst	Kernel/pos_namespace.c	/^int pos_ns_limit_burst(struct pos_ns_trie_node *trie_node, int index,$/;"	f
pos_ns_node_struct_cachep	Kernel/pos.h	/^	struct kmem_cache *pos_ns_node_struct_cachep;$/;"	m	struct:pos_superblock	typeref:struct:pos_superblock::kmem_cache
pos_ns_ratio_burst	Kernel/pos_namespace.c	/^int pos_ns_ratio_burst(struct pos_ns_trie_node *trie_node, int index,$/;"	f
pos_ns_rec_struct_cachep	Kernel/pos.h	/^	struct kmem_cache *pos_ns_rec_struct_cachep;$/;"	m	struct:pos_superblock	typeref:struct:pos_superblock::kmem_cache
pos_ns_record	Kernel/pos_namespace.h	/^struct pos_ns_record$/;"	s
pos_ns_search	Kernel/pos_namespace.c	/^struct pos_ns_record *pos_ns_search(struct pos_ns_trie_node *root,$/;"	f
pos_ns_search_container	Kernel/pos_namespace.c	/^struct pos_ns_record *pos_ns_search_container(struct pos_ns_container *container,$/;"	f
pos_ns_trend_burst	Kernel/pos_namespace.c	/^int pos_ns_trend_burst(struct pos_ns_trie_node *trie_node, int index,$/;"	f
pos_ns_trie_node	Kernel/pos_namespace.h	/^struct pos_ns_trie_node$/;"	s
pos_pages_to_level	Kernel/pos.c	/^int pos_pages_to_level(unsigned long nr_pages)$/;"	f
pos_print_free_chunks	Library/pos-malloc.c	/^pos_print_free_chunks(char *name)$/;"	f
pos_public_fREe	Library/pos-malloc.c	/^pos_public_fREe(char *name, Void_t *mem)$/;"	f
pos_public_fREe	Library/pos-malloc.c	68;"	d	file:
pos_public_mALLOc	Library/pos-malloc.c	/^pos_public_mALLOc(char *name, unsigned long _bytes, int obj_type) $/;"	f
pos_public_mALLOc	Library/pos-malloc.c	69;"	d	file:
pos_public_rEALLOc	Library/pos-malloc.c	/^pos_public_rEALLOc(char *name, Void_t *oldmem, unsigned long _bytes)$/;"	f
pos_public_rEALLOc	Library/pos-malloc.c	70;"	d	file:
pos_pval_desc_link_rb	Kernel/pos.c	/^void pos_pval_desc_link_rb(struct pos_pval_device *pval_dev, struct pos_pval_descriptor *pval_desc,$/;"	f
pos_pval_desc_struct_cachep	Kernel/pos.h	/^	struct kmem_cache *pos_pval_desc_struct_cachep;$/;"	m	struct:pos_superblock	typeref:struct:pos_superblock::kmem_cache
pos_pval_descriptor	Kernel/pos.h	/^struct pos_pval_descriptor$/;"	s
pos_pval_dev_struct_cachep	Kernel/pos.h	/^	struct kmem_cache *pos_pval_dev_struct_cachep;$/;"	m	struct:pos_superblock	typeref:struct:pos_superblock::kmem_cache
pos_pval_device	Kernel/pos.h	/^struct pos_pval_device$/;"	s
pos_pval_table_index	Kernel/pos.c	/^int pos_pval_table_index(dev_t device)$/;"	f
pos_recovery	Library/pos-log.c	/^int pos_recovery(char *name)$/;"	f
pos_recovery_free	Library/pos-log.c	/^int pos_recovery_free(char *name, unsigned long *log_addr)$/;"	f
pos_recovery_insert	Library/pos-log.c	/^int pos_recovery_insert(char *name, unsigned long *log_addr)$/;"	f
pos_recovery_ptr	Library/pos-log.c	/^int pos_recovery_ptr(unsigned long *log_addr)$/;"	f
pos_recovery_remove	Library/pos-log.c	/^int pos_recovery_remove(unsigned long *log_addr)$/;"	f
pos_reduce_map_array	Kernel/pos.c	/^void pos_reduce_map_array(struct pos_map_array *map_array,$/;"	f
pos_reduce_map_array_level	Kernel/pos.c	/^int pos_reduce_map_array_level(struct pos_vm_area *vma)$/;"	f
pos_remove_pval_desc	Kernel/pos.c	/^void pos_remove_pval_desc(struct pos_pval_device *pval_dev, struct pos_pval_descriptor *pval_desc)$/;"	f
pos_remove_vm_area	Kernel/pos.c	/^void pos_remove_vm_area(struct pos_superblock *sb, struct pos_vm_area *vma,$/;"	f
pos_sb	Kernel/pos.c	/^struct pos_superblock* pos_sb;$/;"	v	typeref:struct:pos_superblock
pos_seg_alloc	Library/pos-lib.c	/^pos_seg_alloc(char *name, unsigned long len)$/;"	f
pos_seg_free	Library/pos-lib.c	/^pos_seg_free(char *name, void *addr, unsigned long len)$/;"	f
pos_set_prime_object	Library/pos-malloc.c	/^pos_set_prime_object(char *name, void *obj)$/;"	f
pos_superblock	Kernel/pos.h	/^struct pos_superblock$/;"	s
pos_task_pid	Kernel/pos.h	/^struct pos_task_pid$/;"	s
pos_task_pid_struct_cachep	Kernel/pos.c	/^struct kmem_cache *pos_task_pid_struct_cachep;$/;"	v	typeref:struct:kmem_cache
pos_transaction_end	Library/pos-log.c	/^int pos_transaction_end(char *name)$/;"	f
pos_transaction_start	Library/pos-log.c	/^int pos_transaction_start(char *name, unsigned long type)$/;"	f
pos_unmap	Library/pos-lib.c	/^pos_unmap(char *name)$/;"	f
pos_unmap_area	Kernel/pos.c	/^void pos_unmap_area(struct pos_superblock *sb, unsigned long addr)$/;"	f
pos_unmap_vma	Kernel/pos.c	/^void pos_unmap_vma(struct mm_struct *mm, struct pos_vm_area *pos_vma)$/;"	f
pos_unsafe_region_relocate	Library/pos-malloc.c	/^Void_t* pos_unsafe_region_relocate(char *name, mstate av, Void_t *p)$/;"	f
pos_vfree	Kernel/pos.c	/^void pos_vfree(void *addr)$/;"	f
pos_vm_area	Kernel/pos.h	/^struct pos_vm_area$/;"	s
pos_vma_link_list	Kernel/pos.c	/^void pos_vma_link_list(struct pos_superblock *sb, struct pos_vm_area *vma,$/;"	f
pos_vma_link_list2	Kernel/pos.c	/^void pos_vma_link_list2(struct pos_descriptor *desc, struct pos_vm_area *vma)$/;"	f
pos_vma_link_rb	Kernel/pos.c	/^void pos_vma_link_rb(struct pos_superblock *sb, struct pos_vm_area *vma,$/;"	f
pos_vma_struct_cachep	Kernel/pos.h	/^	struct kmem_cache *pos_vma_struct_cachep;$/;"	m	struct:pos_superblock	typeref:struct:pos_superblock::kmem_cache
pos_vmalloc	Kernel/pos.c	/^void *pos_vmalloc(unsigned long size)$/;"	f
pos_write_value	KV/btree/pos-btree.c	65;"	d	file:
pos_write_value	KV/hashtable/pos-hashtable.c	25;"	d	file:
pos_write_value	KV/list/pos-list.c	20;"	d	file:
pos_write_value_kv	Library/pos-log.c	/^int pos_write_value_kv(char *name, unsigned long *addr, unsigned long value)$/;"	f
pos_write_value_kv_noflush	Library/pos-log.c	/^int pos_write_value_kv_noflush(char *name, unsigned long *addr, unsigned long value)$/;"	f
pos_write_value_malloc	Library/pos-log.c	/^int pos_write_value_malloc(char *name, unsigned long *addr, unsigned long value)$/;"	f
prev_chunk	Library/pos-malloc.h	533;"	d
prev_inuse	Library/pos-malloc.h	489;"	d
prev_size	Library/pos-malloc.h	/^	INTERNAL_SIZE_T      prev_size;  \/* Size of previous chunk (if free).  *\/$/;"	m	struct:malloc_chunk
prime_obj	Library/pos-malloc.h	/^	Void_t *prime_obj;$/;"	m	struct:malloc_state
prime_seg	Kernel/pos.h	/^	unsigned long prime_seg;$/;"	m	struct:pos_descriptor
prime_table_length	KV/hashtable/pos-hashtable.c	/^const unsigned int prime_table_length = sizeof(primes)\/sizeof(primes[0]);	\/\/ 26$/;"	v
primeindex	KV/hashtable/pos-hashtable_private.h	/^    unsigned long primeindex;$/;"	m	struct:hashtable
primes	KV/hashtable/pos-hashtable.c	/^static const unsigned int primes[] = {$/;"	v	file:
print_list	KV/workload_list.c	/^int print_list(struct list *list)$/;"	f
print_log_cnt	Library/pos-log.c	/^void print_log_cnt(void)$/;"	f
ptr_offset	Library/pos-lib.h	/^	unsigned long ptr_offset[50];$/;"	m	struct:node_info
ptrs	Kernel/pos_namespace.h	/^	unsigned long ptrs[POS_ARRAY_LENGTH];$/;"	m	struct:pos_ns_trie_node
pval_table	Kernel/pos.h	/^	struct pos_pval_device *pval_table[POS_PVAL_TABLE];$/;"	m	struct:pos_superblock	typeref:struct:pos_superblock::pos_pval_device
realloc_test	Library/malloc_free.c	/^void realloc_test(void)$/;"	f
rebalance	KV/btree/pos-btree.c	/^static void rebalance(char *name, struct btree_head *head, struct btree_geo *geo,$/;"	f	file:
register_node_info	Library/pos-lib.c	/^int register_node_info(char *name, void *node, void *ptr, unsigned long size)$/;"	f
remove	KV/btree/@btree-type.h	/^static inline void *BTREE_FN(remove)(BTREE_TYPE_HEAD *head, BTREE_KEYTYPE key)$/;"	f
remove_func	KV/main.c	/^	int (*remove_func)(char *, void *);$/;"	m	struct:function_ptr	file:
request2size	Library/pos-malloc.h	467;"	d
sb_rb	Kernel/pos.h	/^	struct rb_root sb_rb;$/;"	m	struct:pos_superblock	typeref:struct:pos_superblock::rb_root
seg_end	Kernel/pos.h	/^	unsigned long seg_end;$/;"	m	struct:pos_pval_descriptor
seg_head	Library/pos-lib.h	/^	struct seg_info *seg_head; \/\/ Head of Prime Segment info$/;"	m	struct:pos_name_entry	typeref:struct:pos_name_entry::seg_info
seg_info	Library/pos-lib.h	/^struct seg_info {$/;"	s
seg_inform	Kernel/pos.c	/^struct seg_inform {$/;"	s	file:
seg_start	Kernel/pos.h	/^	unsigned long seg_start;$/;"	m	struct:pos_pval_descriptor
self_test	Library/malloc_free.c	/^void self_test(void)$/;"	f
set_fastchunks	Library/pos-malloc.h	942;"	d
set_fastchunks_log	Library/pos-malloc.h	945;"	d
set_foot	Library/pos-malloc.h	586;"	d
set_foot_log	Library/pos-malloc.h	597;"	d
set_head	Library/pos-malloc.h	583;"	d
set_head_log	Library/pos-malloc.h	594;"	d
set_head_size	Library/pos-malloc.h	580;"	d
set_head_size_log	Library/pos-malloc.h	591;"	d
set_init_key	Library/pos-malloc.h	955;"	d
set_init_key_log	Library/pos-malloc.h	959;"	d
set_inuse	Library/pos-malloc.h	543;"	d
set_inuse_bit_at_offset	Library/pos-malloc.h	563;"	d
set_inuse_bit_at_offset_log	Library/pos-malloc.h	570;"	d
set_inuse_log	Library/pos-malloc.h	550;"	d
set_max_fast	Library/pos-malloc.h	972;"	d
set_next_seg_pointer	Library/pos-malloc.h	588;"	d
setkey	KV/btree/pos-btree.c	/^static void setkey(struct btree_geo *geo, unsigned long *node, int n,$/;"	f	file:
setkey_log	KV/btree/pos-btree.c	/^static void setkey_log(char *name, struct btree_geo *geo, unsigned long *node, int n,$/;"	f	file:
setval	KV/btree/pos-btree.c	/^static void setval(struct btree_geo *geo, unsigned long *node, int n,$/;"	f	file:
setval_log	KV/btree/pos-btree.c	/^static void setval_log(char *name, struct btree_geo *geo, unsigned long *node, int n,$/;"	f	file:
size	Kernel/pos.c	/^	unsigned long size;$/;"	m	struct:seg_inform	file:
size	Library/pos-lib.h	/^	unsigned long size;$/;"	m	struct:node_info
size	Library/pos-lib.h	/^	unsigned long size;$/;"	m	struct:seg_info
size	Library/pos-malloc.h	/^	INTERNAL_SIZE_T      size;       \/* Size in bytes, including overhead. *\/$/;"	m	struct:malloc_chunk
size_t	KV/btree/pos-btree.c	/^typedef __kernel_size_t		size_t;$/;"	t	file:
size_t	Library/pos-malloc.h	/^typedef __SIZE_TYPE__ size_t;$/;"	t
smallbin_index	Library/pos-malloc.h	801;"	d
str	Kernel/pos_namespace.h	/^	char *str;$/;"	m	struct:pos_ns_record
str_length	Kernel/pos_namespace.h	/^	int str_length;$/;"	m	struct:pos_ns_record
sys_pos_check_seg_addr	Kernel/pos.c	/^asmlinkage void sys_pos_check_seg_addr(char __user *name, void __user *buffer)$/;"	f
sys_pos_create	Kernel/pos.c	/^asmlinkage void *sys_pos_create(char __user *name, unsigned long size)$/;"	f
sys_pos_delete	Kernel/pos.c	/^asmlinkage int sys_pos_delete(char __user *name)$/;"	f
sys_pos_get_object_id	Kernel/pos.c	/^int sys_pos_get_object_id(char __user *object_name, int __user *object_id_buf)$/;"	f
sys_pos_get_sfgc_list	Kernel/pos.c	/^asmlinkage int sys_pos_get_sfgc_list(char **victim_list)$/;"	f
sys_pos_get_storage_type	Kernel/pos.c	/^asmlinkage short sys_pos_get_storage_type(char *obj_storage_name, short type)$/;"	f
sys_pos_is_mapped	Kernel/pos.c	/^asmlinkage  void *sys_pos_is_mapped(char __user *name)$/;"	f
sys_pos_map	Kernel/pos.c	/^asmlinkage void *sys_pos_map(char __user *name)$/;"	f
sys_pos_meta_deliver	Kernel/pos.c	/^asmlinkage int sys_pos_meta_deliver(int __user parcel)$/;"	f
sys_pos_seg_alloc	Kernel/pos.c	/^asmlinkage void *sys_pos_seg_alloc(char __user *name, unsigned long len)$/;"	f
sys_pos_seg_free	Kernel/pos.c	/^asmlinkage int sys_pos_seg_free(char __user *name, void *addr, unsigned long len)$/;"	f
sys_pos_set_storage_type	Kernel/pos.c	/^asmlinkage int sys_pos_set_storage_type(char* __user obj_storage_name, int __user type, int __user size, int __user key, int __user value)$/;"	f
sys_pos_unmap	Kernel/pos.c	/^asmlinkage int sys_pos_unmap(char __user *name)$/;"	f
system_mem	Library/pos-malloc.h	/^	INTERNAL_SIZE_T system_mem;$/;"	m	struct:malloc_state
table	KV/hashtable/pos-hashtable_private.h	/^    struct entry **table;$/;"	m	struct:hashtable	typeref:struct:hashtable::entry
tablelength	KV/hashtable/pos-hashtable_private.h	/^    unsigned long tablelength;$/;"	m	struct:hashtable
tail	KV/workload_list.h	/^	struct node *tail;$/;"	m	struct:list	typeref:struct:list::node
task_list	Kernel/pos_namespace.h	/^	struct pos_task_pid *task_list;	\/\/ This points volatile struct.$/;"	m	struct:pos_ns_record	typeref:struct:pos_ns_record::pos_task_pid
task_next	Kernel/pos.h	/^	struct pos_task_pid *task_next;$/;"	m	struct:pos_task_pid	typeref:struct:pos_task_pid::pos_task_pid
terminate_bdb	KV/workload_list.c	/^int terminate_bdb(char *store_name)$/;"	f
terminate_experiment	KV/main.c	/^int terminate_experiment(char *store_name)$/;"	f
terminate_experiment	KV/main_bdb.c	/^int terminate_experiment(char *store_name)$/;"	f
total_vm	Kernel/pos.h	/^	unsigned long total_vm;	\/\/ page 단위$/;"	m	struct:pos_superblock
trie_root	Kernel/pos.h	/^	struct pos_ns_trie_node *trie_root;$/;"	m	struct:pos_superblock	typeref:struct:pos_superblock::pos_ns_trie_node
uintptr_t	Library/pos-malloc.h	/^typedef unsigned long int uintptr_t;$/;"	t
unlink	Library/pos-malloc.h	697;"	d
unlink_log	Library/pos-malloc.h	720;"	d
unmark_bin	Library/pos-malloc.h	868;"	d
unmark_bin_log	Library/pos-malloc.h	874;"	d
unsorted_chunks	Library/pos-malloc.h	845;"	d
update	KV/btree/@btree-type.h	/^static inline int BTREE_FN(update)(BTREE_TYPE_HEAD *head, BTREE_KEYTYPE key,$/;"	f
v	KV/hashtable/pos-hashtable_private.h	/^    unsigned long *v; $/;"	m	struct:entry
value	KV/list/pos-list.h	/^	unsigned long *value;$/;"	m	struct:list_node
value	KV/main.c	/^unsigned long *value;$/;"	v
victimF_freeL	Library/malloc_free.c	/^void victimF_freeL(void)$/;"	f
victimF_freeM	Library/malloc_free.c	/^void victimF_freeM(void)$/;"	f
victimF_inuseL	Library/malloc_free.c	/^void victimF_inuseL(void)$/;"	f
victimF_inuseM	Library/malloc_free.c	/^void victimF_inuseM(void)$/;"	f
visitor	KV/btree/@btree-type.h	/^static inline size_t BTREE_FN(visitor)(BTREE_TYPE_HEAD *head,$/;"	f
vm_count	Kernel/pos.h	/^	int vm_count;$/;"	m	struct:pos_superblock
vm_end	Kernel/pos.h	/^	unsigned long vm_end;$/;"	m	struct:pos_vm_area
vm_next	Kernel/pos.h	/^	struct pos_vm_area *vm_next;		\/\/전체 vma에 대한 list$/;"	m	struct:pos_vm_area	typeref:struct:pos_vm_area::pos_vm_area
vm_next	Kernel/pos.h	/^	struct pos_vm_area *vm_next;$/;"	m	struct:pos_superblock	typeref:struct:pos_superblock::pos_vm_area
vm_next2	Kernel/pos.h	/^	struct list_head vm_next2;		\/\/하나의 object storage에 포함된 vma에 대한 list$/;"	m	struct:pos_vm_area	typeref:struct:pos_vm_area::list_head
vm_rb	Kernel/pos.h	/^	struct rb_node vm_rb;			\/\/전체 vma에 대한 rb-tree$/;"	m	struct:pos_vm_area	typeref:struct:pos_vm_area::rb_node
vm_start	Kernel/pos.h	/^	unsigned long vm_start;$/;"	m	struct:pos_vm_area
x86_64_clflush_size	Library/pos-log.c	/^int x86_64_clflush_size = 64;$/;"	v
